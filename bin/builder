#!/usr/bin/env node

"use strict";

const ps = require("process");
const fs = require("fs");
const Handlebars = require("handlebars");
const palette = require("../palette.json");
const colorPkg = require("../packages/colors/package.json");
const pkg = require("../package.json");
// const template = fs.readFileSync("templates/txt.hbs", "utf8");
// const comp = Handlebars.compile(template);
const program = require("commander");
const _ = require('lodash');
// console.log(comp(palette));
// console.log(template)

Handlebars.registerHelper("join", (context) => {
  return _.join(context, ", ");
});

Handlebars.registerHelper("tjoin", (context) => {
  return _.join(context, "\t");
});

Handlebars.registerHelper("hextrim", (context) => {
  return context.substring(1);
});

Handlebars.registerHelper("getLabel", (context) => {
  return context.label ? context.label : "Not used"
});

Handlebars.registerHelper("getColorVersion", () => {
  return colorPkg.version;
});


const templates = {
  txt:  "templates/txt.hbs",
  html: "templates/html.hbs",
  gpl:  "templates/gpl.hbs",
  sass: "templates/sass.hbs",
  md:   "templates/README.hbs"
}

program
  .version(pkg.version)
  .option('-l, --list', 'List available formats')
  .option('-o, --output [format]', 'Output format')
  .parse(ps.argv);

const opts = program.opts();

if (opts.list) {
  Object.keys(templates).forEach(key => {
    console.log(key);
  });
  ps.exit();
}

if (!opts.output) {
  console.log('Must declare an output format');
  ps.exit(1);
}

if (!Object.prototype.hasOwnProperty.call(templates, opts.output)) {
  console.log('Invalid output format: ', opts.output);
  ps.exit(1);
}

const file = fs.readFileSync(templates[opts.output], "utf8");
const template = Handlebars.compile(file);
ps.stdout.write(template(palette));
ps.exit();

